{"version":3,"sources":["components/ButtonConvert/ButtonConvert.js","components/CurrencyOptions/CurrencyOptions.js","components/InputAmount/InputAmount.js","components/Converter.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonConvert","className","CurrencyOptions","props","selectedCurrency","onChangeCurrency","currencyOptions","labelName","htmlFor","value","onChange","map","option","InputAmount","handleAmountChange","otherProps","type","required","Converter","fetchData","base","api","fetch","then","response","json","data","setState","rates","currencies","Object","keys","sort","e","target","name","changeBaseCurrency","baseCurrency","changetoCurrency","toCurrency","handleConvert","event","preventDefault","state","originalAmount","converted","toFixed","isConverted","this","updatedText","onSubmit","id","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d238ff4f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ButtonConvert.css';\r\n\r\nconst ButtonConvert = () => {\r\n  return <button className='btn-convert'>Convert</button>;\r\n};\r\n\r\nexport default ButtonConvert;\r\n","import React from 'react';\r\nimport './CurrencyOptions.css';\r\nimport './arrow-icon.png';\r\n\r\nconst CurrencyOptions = (props) => {\r\n  const {\r\n    selectedCurrency,\r\n    onChangeCurrency,\r\n    currencyOptions,\r\n    labelName,\r\n  } = props;\r\n  return (\r\n    <div className='select-wrapper'>\r\n      <label className='select-label' htmlFor={labelName}>\r\n        {labelName}\r\n      </label>\r\n      <select\r\n        className='select-currency'\r\n        value={selectedCurrency}\r\n        onChange={onChangeCurrency}\r\n      >\r\n        {currencyOptions.map((option) => (\r\n          <option key={option} value={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrencyOptions;\r\n","import React from 'react';\r\nimport './InputAmount.css';\r\n\r\nconst InputAmount = ({ handleAmountChange, ...otherProps }) => {\r\n  return (\r\n    <div className='input-wrapper'>\r\n      <input\r\n        type='number'\r\n        onChange={handleAmountChange}\r\n        {...otherProps}\r\n        required\r\n      />\r\n      <label htmlFor='amount' className='label-name'>\r\n        <span className='content-name'>amount</span>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputAmount;\r\n","import React, { Component } from 'react';\r\nimport ButtonConvert from './ButtonConvert/ButtonConvert';\r\nimport CurrencyOptions from './CurrencyOptions/CurrencyOptions';\r\nimport InputAmount from './InputAmount/InputAmount';\r\n\r\nexport class Converter extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      originalAmount: '',\r\n      baseCurrency: 'NOK',\r\n      toCurrency: 'USD',\r\n      currencies: [],\r\n      rates: [],\r\n      converted: '',\r\n      isConverted: false,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.fetchData(this.state.baseCurrency);\r\n  }\r\n\r\n  fetchData = (base) => {\r\n    const api = `https://api.exchangeratesapi.io/latest?base=${base}`;\r\n    fetch(api)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState({\r\n          rates: data['rates'],\r\n          currencies: [...Object.keys(data['rates']).sort()],\r\n        });\r\n      });\r\n  };\r\n\r\n  handleAmountChange = (e) => {\r\n    const { value, name } = e.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  changeBaseCurrency = (e) => {\r\n    this.setState({ baseCurrency: e.target.value });\r\n    this.fetchData(e.target.value);\r\n  };\r\n\r\n  changetoCurrency = (e) => {\r\n    this.setState({ toCurrency: e.target.value });\r\n    this.fetchData(e.target.value);\r\n  };\r\n\r\n  handleConvert = (event) => {\r\n    event.preventDefault();\r\n    const { originalAmount, toCurrency, rates } = this.state;\r\n    this.setState({\r\n      converted: (originalAmount * rates[toCurrency]).toFixed(3),\r\n      isConverted: true,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      originalAmount,\r\n      baseCurrency,\r\n      toCurrency,\r\n      currencies,\r\n      isConverted,\r\n      converted,\r\n    } = this.state;\r\n\r\n    const defaultText = 'Converted ðŸ’° will appear here.';\r\n    const updatedText = `${originalAmount} ${baseCurrency} = ${converted} ${toCurrency}`;\r\n\r\n    return (\r\n      <form onSubmit={this.handleConvert}>\r\n        <InputAmount\r\n          name='originalAmount'\r\n          value={originalAmount}\r\n          id='originalAmount'\r\n          handleAmountChange={this.handleAmountChange}\r\n        />\r\n        <CurrencyOptions\r\n          labelName='from'\r\n          currencyOptions={currencies}\r\n          onChangeCurrency={this.changeBaseCurrency}\r\n          name='baseCurrency'\r\n          id='from'\r\n          selectedCurrency={baseCurrency}\r\n        />\r\n        <CurrencyOptions\r\n          labelName='to'\r\n          currencyOptions={currencies}\r\n          onChangeCurrency={this.changetoCurrency}\r\n          name='toCurrency'\r\n          id='to'\r\n          selectedCurrency={toCurrency}\r\n        />\r\n        <ButtonConvert />\r\n        <p>{isConverted ? updatedText : defaultText}</p>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Converter;\r\n","import './App.css';\r\nimport Converter from './components/Converter';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <header className='App-header'>\r\n        <h1>Currency Converter</h1>\r\n      </header>\r\n      <div className='App-content'>\r\n        <Converter />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}