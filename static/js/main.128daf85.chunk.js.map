{"version":3,"sources":["components/ButtonConvert/ButtonConvert.js","components/CurrencyOptions/CurrencyOptions.js","components/InputAmount/InputAmount.js","components/SwitchCurrencies/switch-vertical.svg","components/SwitchCurrencies/SwitchCurrencies.js","components/Converter.js","components/Header/Header.js","App.js","reportWebVitals.js","index.js"],"names":["ButtonConvert","props","onClick","handleConvert","className","CurrencyOptions","selectedCurrency","onChangeCurrency","currencyOptions","labelName","htmlFor","value","onChange","map","option","InputAmount","handleAmountChange","otherProps","type","required","SwitchCurrencies","handleSwitchCurrencies","alt","src","arrow","Converter","fetchData","base","api","fetch","then","response","json","data","setState","rates","date","currencies","Object","keys","sort","calculate","e","target","name","changeBaseCurrency","baseCurrency","changetoCurrency","toCurrency","state","amount","conversionResult","toFixed","result","event","preventDefault","isConverted","this","string","defaultText","updatedText","dateText","dateTime","Date","toLocaleDateString","year","month","day","onSubmit","id","Component","Header","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.128daf85.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ButtonConvert.css';\r\n\r\nconst ButtonConvert = (props) => {\r\n  return (\r\n    <button onClick={props.handleConvert} className='btn-convert'>\r\n      Convert\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ButtonConvert;\r\n","import './CurrencyOptions.css';\r\nimport './arrow-icon.png';\r\n\r\nconst CurrencyOptions = ({\r\n  selectedCurrency,\r\n  onChangeCurrency,\r\n  currencyOptions,\r\n  labelName,\r\n}) => {\r\n  return (\r\n    <div className='select-wrapper'>\r\n      <label className='select-label' htmlFor={labelName}>\r\n        {labelName}\r\n      </label>\r\n      <select\r\n        className='select-currency'\r\n        value={selectedCurrency}\r\n        onChange={onChangeCurrency}\r\n      >\r\n        {currencyOptions.map((option) => (\r\n          <option key={option} value={option}>\r\n            {option}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrencyOptions;\r\n","import './InputAmount.css';\r\n\r\nconst InputAmount = ({ handleAmountChange, ...otherProps }) => {\r\n  return (\r\n    <div className='input-wrapper'>\r\n      <input\r\n        type='number'\r\n        onChange={handleAmountChange}\r\n        {...otherProps}\r\n        required\r\n      />\r\n      <label htmlFor='amount' className='label-name'>\r\n        <span className='content-name'>amount</span>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputAmount;\r\n","export default __webpack_public_path__ + \"static/media/switch-vertical.0b51795a.svg\";","import arrow from './switch-vertical.svg';\r\nimport './SwitchCurrencies.css';\r\n\r\nconst SwitchCurrencies = ({ handleSwitchCurrencies }) => {\r\n  return (\r\n    <img\r\n      className='switch-icon'\r\n      alt='switch-arrow to change currency'\r\n      src={arrow}\r\n      onClick={handleSwitchCurrencies}\r\n    ></img>\r\n  );\r\n};\r\n\r\nexport default SwitchCurrencies;\r\n","import React, { Component } from 'react';\r\nimport ButtonConvert from './ButtonConvert/ButtonConvert';\r\nimport CurrencyOptions from './CurrencyOptions/CurrencyOptions';\r\nimport InputAmount from './InputAmount/InputAmount';\r\nimport SwitchCurrencies from './SwitchCurrencies/SwitchCurrencies';\r\n\r\nexport class Converter extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      amount: '',\r\n      baseCurrency: 'NOK',\r\n      toCurrency: 'EUR',\r\n      currencies: [],\r\n      rates: [],\r\n      date: '',\r\n      result: '',\r\n      isConverted: false,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.fetchData(this.state.baseCurrency);\r\n  }\r\n\r\n  fetchData = (base) => {\r\n    const api = `https://api.exchangerate.host/latest?base=${base}`;\r\n    fetch(api)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        this.setState(\r\n          {\r\n            rates: data.rates,\r\n            date: data.date,\r\n            currencies: [...Object.keys(data.rates).sort()],\r\n          },\r\n          this.calculate\r\n        );\r\n      });\r\n  };\r\n\r\n  handleAmountChange = (e) => {\r\n    const { value, name } = e.target;\r\n\r\n    this.setState(\r\n      {\r\n        [name]: value,\r\n      },\r\n      this.calculate\r\n    );\r\n  };\r\n\r\n  changeBaseCurrency = (e) => {\r\n    this.setState({\r\n      baseCurrency: e.target.value,\r\n    });\r\n    this.fetchData(e.target.value);\r\n  };\r\n\r\n  changetoCurrency = (e) => {\r\n    this.setState(\r\n      {\r\n        toCurrency: e.target.value,\r\n      },\r\n      this.calculate\r\n    );\r\n  };\r\n\r\n  calculate = () => {\r\n    const { amount, toCurrency, rates } = this.state;\r\n    const conversionResult = (rates[toCurrency] * amount).toFixed(3);\r\n    this.setState({\r\n      result: conversionResult,\r\n    });\r\n  };\r\n\r\n  handleConvert = (event) => {\r\n    event.preventDefault();\r\n    const { date } = this.state;\r\n    this.setState(\r\n      {\r\n        isConverted: true,\r\n        date,\r\n      },\r\n      this.calculate\r\n    );\r\n  };\r\n\r\n  handleSwitchCurrencies = () => {\r\n    const { baseCurrency, toCurrency } = this.state;\r\n    this.setState({\r\n      baseCurrency: toCurrency,\r\n      toCurrency: baseCurrency,\r\n      result: this.state.result,\r\n    });\r\n    this.fetchData(this.state.toCurrency);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      amount,\r\n      baseCurrency,\r\n      toCurrency,\r\n      currencies,\r\n      isConverted,\r\n      result,\r\n      date,\r\n    } = this.state;\r\n\r\n    const defaultText = <p>Converted ðŸ’° will appear here.</p>;\r\n    const updatedText = (\r\n      <p className='App-text'>\r\n        {amount} {baseCurrency} = {result} {toCurrency}\r\n      </p>\r\n    );\r\n\r\n    const formatDate = (string) => {\r\n      const options = { year: 'numeric', month: 'long', day: 'numeric' };\r\n      return new Date(string).toLocaleDateString([], options);\r\n    };\r\n\r\n    const dateText = (\r\n      <p>\r\n        {' '}\r\n        last updated <time dateTime={date}>{formatDate(date)}</time>{' '}\r\n      </p>\r\n    );\r\n\r\n    return (\r\n      <>\r\n        <form onSubmit={this.handleConvert}>\r\n          <InputAmount\r\n            name='amount'\r\n            value={amount}\r\n            id='amount'\r\n            handleAmountChange={this.handleAmountChange}\r\n          />\r\n          <CurrencyOptions\r\n            labelName='from'\r\n            currencyOptions={currencies}\r\n            onChangeCurrency={this.changeBaseCurrency}\r\n            name='baseCurrency'\r\n            id='from'\r\n            selectedCurrency={baseCurrency}\r\n          />\r\n          <SwitchCurrencies\r\n            handleSwitchCurrencies={this.handleSwitchCurrencies}\r\n          />\r\n          <CurrencyOptions\r\n            labelName='to'\r\n            currencyOptions={currencies}\r\n            onChangeCurrency={this.changetoCurrency}\r\n            name='toCurrency'\r\n            id='to'\r\n            selectedCurrency={toCurrency}\r\n          />\r\n          <ButtonConvert />\r\n        </form>\r\n        {isConverted ? updatedText : defaultText}\r\n        {isConverted && dateText}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Converter;\r\n","import './Header.css';\r\nconst Header = () => {\r\n  return (\r\n    <header className='app-header'>\r\n      <h1>Currency Converter</h1>\r\n    </header>\r\n  );\r\n};\r\n\r\n//CSS in JS\r\n\r\n// const headerStyles = {\r\n//   color: 'white',\r\n//   fontSize: '36px',\r\n// };\r\n//<h1 style={headerStyles}>Currency Converter</h1>\r\n\r\nexport default Header;\r\n","import './App.css';\r\nimport Converter from './components/Converter';\r\nimport Header from './components/Header/Header';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className='App'>\r\n      <Header />\r\n      <div className='container'>\r\n        <div className='App-content'>\r\n          <Converter />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}